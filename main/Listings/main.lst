C51 COMPILER V9.60.0.0   MAIN                                                              04/18/2020 05:36:40 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <c8051f020.h>
   2          #include "std_macros.h"
   3          #include "DIO.h"
   4          #include "Keypad.h"
   5          #include "SevenSegments.h"
   6          #include "stepper.h"
   7          #define NOTPRESSED 0xff
   8          
   9          #include <stdio.h>
  10          #include <stdlib.h>
  11          
  12          int cmpfunc (const void * a, const void * b);
  13          void append(char *ar, char size, char ch);
  14          void checkPresed(void);
  15          
  16          
  17          unsigned char value,presed,step;
  18          char sevensegmentValue;
  19          char up[3] ={6,0,4}; // up falgs list
  20          char down[3] ={1,5,7}; // down flags list
  21          char buttonPresed[8] = {1,1,1,1,1,1,1,1};
  22          char buttonPresedFlags[8] = {0,0,0,0,0,0,0,0};
  23          char keypadFlags[5] = {0,1,2,3,4};
  24          char keypadvalues[5] = {0};
  25          char arr[4] = {0,1,2,3}; // sevenSegments number
  26          // renames pins name
  27          sbit oneUp = P3^0;
  28          sbit oneDown = P3^1;
  29          sbit twoUp = P3^4;
  30          sbit twoDown = P3^5;
  31          sbit zeroUp = P3^6;
  32          sbit threeDown = P3^7;
  33          
  34          //char UPlist[3] = {P3,0,0}; // list of upPins
  35          //char DOWNlist[3] = {oneDown,twoDown,threeDown}; // list of downPins
  36          volatile char count = 0;
  37          volatile char flag = 0;
  38          /*
  39          void ext_int_0() interrupt 0
  40          { 
  41              count++;
  42          }
  43          
  44          void ext_int_1() interrupt 2
  45          { 
  46              count--;
  47          }
  48          */
  49          sbit LED = P0^0;
  50          void timer0_isr() interrupt 1
  51          {
  52   1        TH0 = 0X4B;        //ReLoad the timer value
  53   1          TL0 = 0XFD;
  54   1          count++;        // Toggle the LED pin 
C51 COMPILER V9.60.0.0   MAIN                                                              04/18/2020 05:36:40 PAGE 2   

  55   1          LED = !LED;
  56   1      }
  57          
  58          void main (void)
  59          {
  60   1        WDTCN = 0xDE;
  61   1        WDTCN = 0xAD;
  62   1        keypad_vInit(1);
  63   1        DIO_setPort_OutPutMode(3,1);
  64   1        seven_seg_init(0,0);
  65   1        seven_seg_init(0,1);
  66   1        motor_init(2,0);
  67   1        motor_init(2,1);
  68   1        interrupt_enable();
  69   1        
  70   1        interrupt_1Enable();
  71   1        DIO_setPortInput(3);
  72   1        
  73   1         CLR_BIT(CKCON,3); // 
  74   1        //set the timer mode 
  75   1        CLR_BIT(TMOD,1);
  76   1        CLR_BIT(TMOD,0);
  77   1        TL0 = 0x00; // start value
  78   1        TH0 = 0x00; //relaod value
  79   1        SET_BIT(IE,1);
  80   1        initTimer();
  81   1        //SET_BIT(TCON,4);
  82   1        
  83   1        
  84   1      
  85   1        while(1)
  86   1        {
  87   2          if(count >= 50)
  88   2          {
  89   3            motor_rotate(2,2,1);      // Toggle the LED pin 
  90   3            count = 0;
  91   3          }
  92   2          /*
  93   2          checkPresed();    
  94   2          step =0;
  95   2          presed = keypad_press(1);
  96   2          append(keypadvalues,sizeof(keypadvalues),presed);
  97   2          // printf("chArray (after append) : %s\n", keypadvalues);
  98   2        //  qsort(keypadvalues, 5, sizeof(char), cmpfunc);
  99   2          
 100   2      
 101   2          if(presed != NOTPRESSED)
 102   2          {
 103   2            for(step=0;step<5;step++)
 104   2            {
 105   2            seven_seg_write(0,keypadvalues[step],0);
 106   2            }
 107   2            /*
 108   2            motor_rotate(2,2,1);
 109   2            sevensegmentValue = presed;
 110   2            while(sevensegmentValue != -1)
 111   2            {
 112   2              
 113   2              if(step!=sevensegmentValue)
 114   2              {
 115   2              seven_seg_write(0,arr[step],0);
 116   2              step++;
C51 COMPILER V9.60.0.0   MAIN                                                              04/18/2020 05:36:40 PAGE 3   

 117   2              }
 118   2              else{
 119   2              break;
 120   2              }
 121   2              motor_rotate(2,0,0);
 122   2              
 123   2              sevensegmentValue--;
 124   2            */
 125   2            }
 126   1          
 127   1      
 128   1      }
 129          
 130          void checkPresed(void)
 131            {
 132   1          for(step=0;step<8;step++)
 133   1          {
 134   2            buttonPresed[step]=DIO_read(3,step);
 135   2            delay_ms(1);
 136   2          }
 137   1          for(step=0;step<8;step++)
 138   1          {
 139   2            if(0 == buttonPresed[step])
 140   2            {
 141   3              buttonPresedFlags[step] = 1;
 142   3            }
 143   2          }
 144   1        }
 145            
 146            void append(char *ar, char size, char ch) {
 147   1          char index = 0;
 148   1          // Get to the end of the string
 149   1          while (*ar) {
 150   2              ar++;
 151   2              ++index;
 152   2          }
 153   1       
 154   1          // If sufficient space, append
 155   1          // Otherwise, do nothing
 156   1          //
 157   1          if (index < size-1) {
 158   2              *ar = ch;
 159   2              *(ar+1) = '\0';
 160   2          }
 161   1      }
 162            
 163          int cmpfunc (const void * a, const void * b) {
 164   1         return ( *(int*)a - *(int*)b );
 165   1      }
 166          
 167            /*
 168              for(step=0;step<8;step++)
 169              {
 170                if(buttonPresedFlags[step]==1)
 171                {
 172                  DIO_write(2,step,0);
 173                  delay_ms(1);
 174                }
 175              }
 176              */
 177              

C51 COMPILER V9.60.0.0   MAIN                                                              04/18/2020 05:36:40 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     42      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
